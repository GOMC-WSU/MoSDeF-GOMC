from itertools import groupby

import numpy as np
from mbuild.compound import Compound



def load_mol2(filename, part=None):
    """Load a TRIPOS mol2 file into a Compound.

    If no Compound is specified, this function will return a new Compound.

    Args:
        filename (str): Path to the mol2 file to be read.
        part (Compound, optional): Optionally read the mol2 data into an
            existing Compound.

    Returns:
        part (Compound): The Compound containing the mol2 file's data.

    """
    # coords = []
    # types = []
    # bonds = []
    # bond_types = []
    #
    # atom_list = list()
    # with open(filename, 'r') as mol2_file:
    #     data = dict((key, list(grp)) for key, grp in groupby(mol2_file, _parse_mol2_sections))
    #
    # for idx, atom in enumerate(data['@<TRIPOS>ATOM\n'][1:]):
    #     entries = atom.split()
    #     if len(entries) == 0:
    #         continue
    #     kind = entries[1]
    #     x = entries[2]
    #     y = entries[3]
    #     z = entries[4]
    #     # coords.append(float(x), float(y), float(z))
    #     coords.append(float(x))
    #     coords.append(float(y))
    #     coords.append(float(z))
    #     types.append(kind)
    #
    # # import pdb
    # # pdb.set_trace()
    # coords = np.reshape(coords, newshape=(len(coords)/3,3))
    # types = np.reshape(types, newshape=(len(types)))
    #
    # for bond in data['@<TRIPOS>BOND\n'][1:]:
    #     _, atom1_idx, atom2_idx, _ = bond.split()
    #     bonds.append(int(atom1_idx) - 1)
    #     bonds.append(int(atom2_idx) - 1)
    #
    # bonds = np.reshape(bonds, newshape=(len(bonds)/2, 2))
    #
    # sys = FlatCompound(coords=coords, types=types, bonds=bonds)

    from mbuild.plugins.trajectory import load
    t = load(filename)

    if part is None:
        return t
    elif isinstance(part, Compound):
        return t.to_compound(part=part)
    else:
        raise ValueError

def write_mol2(part, filename='mbuild.mol2'):
    """Output a Compound as a TRIPOS mol2 file.

    Args:
        part (Compound): The Compound to be output.
        filename (str, optional): Path of the output file.

    """


    sys = None
    if isinstance(part, Compound):
        sys = FlatCompound.from_compound(part)
    if isinstance(part, FlatCompound):
        sys = part

    if sys is None:
        return

    with open(filename, 'w') as mol2_file:
        mol2_file.write("@<TRIPOS>MOLECULE\n")
        mol2_file.write("Generated by mBuild\n")
        mol2_file.write("{0} {1} 0 0 0\n".format(sys.n_atoms, sys.n_bonds))
        mol2_file.write("SMALL\n")
        mol2_file.write("NO_CHARGES\n")
        mol2_file.write("\n")

        mol2_file.write("@<TRIPOS>ATOM\n")
        for idx, kind in enumerate(sys.types):
            x, y, z = sys.coords[idx]
            mol2_file.write("{0} {1} {2:8.4f} {3:8.4f} {4:8.4f} {5}\n".format(
                    idx + 1, sys.types[idx], x, y, z, kind))
   
        if sys.n_bonds:
            mol2_file.write("\n@<TRIPOS>BOND\n")
            for bond_idx, bond in enumerate(sys.bonds):
                mol2_file.write("{0} {1} {2} 1\n".format(
                        bond_idx + 1, bond[0]+1, bond[1]+1))



    #n_atoms = len([atom for atom in part.atoms() if atom.kind != "G"])
    #n_bonds = len(list(part.bonds()))

    #with open(filename, 'w') as mol2_file:
    #    mol2_file.write("@<TRIPOS>MOLECULE\n")
    #    mol2_file.write("Generated by mBuild\n")
    #    mol2_file.write("{0} {1} 0 0 0\n".format(n_atoms, n_bonds))
    #    mol2_file.write("SMALL\n")
    #    mol2_file.write("NO_CHARGES\n")
    #    mol2_file.write("\n")

    #    mol2_file.write("@<TRIPOS>ATOM\n")
    #    id_to_idx = dict()
    #    for atom_idx, atom in enumerate([a for a in part.atoms() if a.kind != "G"]):
    #        id_to_idx[id(atom)] = atom_idx + 1
    #        x, y, z = atom.pos
    #        mol2_file.write("{0} {1} {2:8.4f} {3:8.4f} {4:8.4f} {5}\n".format(
    #                atom_idx + 1, atom.kind[0], x, y, z, atom.kind))

    #    if n_bonds:
    #        mol2_file.write("\n@<TRIPOS>BONDS\n")
    #        for bond_idx, bond in enumerate(part.bonds()):
    #            mol2_file.write("{0} {1} {2} 1\n".format(
    #                    bond_idx + 1, id_to_idx[id(bond.atom1)], id_to_idx[id(bond.atom2)]))

def _parse_mol2_sections(x):
    """Helper functon for parsing a section in a mol2 file. """
    if x.startswith('@<TRIPOS>'):
        _parse_mol2_sections.key = x
    return _parse_mol2_sections.key
